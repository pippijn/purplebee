PurpleXfer* purple_xfer_new (PurpleAccount* account, PurpleXferType type, const char* who);
GList* purple_xfers_get_all (void);
void purple_xfer_ref (PurpleXfer* xfer);
void purple_xfer_unref (PurpleXfer* xfer);
void purple_xfer_request (PurpleXfer* xfer);
void purple_xfer_request_accepted (PurpleXfer* xfer, const char* filename);
void purple_xfer_request_denied (PurpleXfer* xfer);
PurpleXferType purple_xfer_get_type (const PurpleXfer* xfer);
PurpleAccount* purple_xfer_get_account (const PurpleXfer* xfer);
const char* purple_xfer_get_remote_user (const PurpleXfer* xfer);
PurpleXferStatusType purple_xfer_get_status (const PurpleXfer* xfer);
gboolean purple_xfer_is_canceled (const PurpleXfer* xfer);
gboolean purple_xfer_is_completed (const PurpleXfer* xfer);
const char* purple_xfer_get_filename (const PurpleXfer* xfer);
const char* purple_xfer_get_local_filename (const PurpleXfer* xfer);
size_t purple_xfer_get_bytes_sent (const PurpleXfer* xfer);
size_t purple_xfer_get_bytes_remaining (const PurpleXfer* xfer);
size_t purple_xfer_get_size (const PurpleXfer* xfer);
double purple_xfer_get_progress (const PurpleXfer* xfer);
unsigned int purple_xfer_get_local_port (const PurpleXfer* xfer);
const char* purple_xfer_get_remote_ip (const PurpleXfer* xfer);
unsigned int purple_xfer_get_remote_port (const PurpleXfer* xfer);
time_t purple_xfer_get_start_time (const PurpleXfer* xfer);
time_t purple_xfer_get_end_time (const PurpleXfer* xfer);
void purple_xfer_set_completed (PurpleXfer* xfer, gboolean completed);
void purple_xfer_set_message (PurpleXfer* xfer, const char* message);
void purple_xfer_set_filename (PurpleXfer* xfer, const char* filename);
void purple_xfer_set_local_filename (PurpleXfer* xfer, const char* filename);
void purple_xfer_set_size (PurpleXfer* xfer, size_t size);
void purple_xfer_set_bytes_sent (PurpleXfer* xfer, size_t bytes_sent);
PurpleXferUiOps* purple_xfer_get_ui_ops (const PurpleXfer* xfer);
void purple_xfer_set_read_fnc (PurpleXfer * xfer,
                               gssize (*fnc)(guchar**, PurpleXfer*));
void purple_xfer_set_write_fnc (PurpleXfer * xfer,
                                gssize (*fnc)(const guchar*, size_t, PurpleXfer*));
void purple_xfer_set_ack_fnc (PurpleXfer * xfer,
                              void (*fnc)(PurpleXfer*, const guchar*, size_t));
void purple_xfer_set_request_denied_fnc (PurpleXfer * xfer, void (*fnc)(PurpleXfer*));
void purple_xfer_set_init_fnc (PurpleXfer * xfer, void (*fnc)(PurpleXfer*));
void purple_xfer_set_start_fnc (PurpleXfer * xfer, void (*fnc)(PurpleXfer*));
void purple_xfer_set_end_fnc (PurpleXfer * xfer, void (*fnc)(PurpleXfer*));
void purple_xfer_set_cancel_send_fnc (PurpleXfer * xfer, void (*fnc)(PurpleXfer*));
void purple_xfer_set_cancel_recv_fnc (PurpleXfer * xfer, void (*fnc)(PurpleXfer*));
gssize purple_xfer_read (PurpleXfer* xfer, guchar** buffer);
gssize purple_xfer_write (PurpleXfer* xfer, const guchar* buffer, gsize size);
void purple_xfer_start (PurpleXfer* xfer, int fd, const char* ip, unsigned int port);
void purple_xfer_end (PurpleXfer* xfer);
void purple_xfer_add (PurpleXfer* xfer);
void purple_xfer_cancel_local (PurpleXfer* xfer);
void purple_xfer_cancel_remote (PurpleXfer* xfer);
void purple_xfer_error (PurpleXferType type, PurpleAccount* account, const char* who, const char* msg);
void purple_xfer_update_progress (PurpleXfer* xfer);
void purple_xfer_conversation_write (PurpleXfer* xfer, char* message, gboolean is_error);
void purple_xfer_ui_ready (PurpleXfer* xfer);
void purple_xfer_prpl_ready (PurpleXfer* xfer);
void* purple_xfers_get_handle (void);
void purple_xfers_init (void);
void purple_xfers_uninit (void);
void purple_xfers_set_ui_ops (PurpleXferUiOps* ops);
PurpleXferUiOps* purple_xfers_get_ui_ops (void);
